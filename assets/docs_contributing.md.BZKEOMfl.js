import{_ as t,c as a,o as i,ag as o}from"./chunks/framework.iMQzIODh.js";const p=JSON.parse('{"title":"Contributing","description":"","frontmatter":{},"headers":[],"relativePath":"docs/contributing.md","filePath":"docs/contributing.md","lastUpdated":1756623767000}'),l={name:"docs/contributing.md"};function r(n,e,s,c,u,d){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h1><p>Thank you for considering a contribution! We welcome bug reports, feature requests, code, docs, and suggestions.</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><ul><li>Go</li><li>Trivy</li><li>Grype</li><li>Docker</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><ol><li>Fork the repository.</li><li>Clone your fork.</li></ol><ul><li><code> git clone &lt;your-fork-url&gt;.git</code></li></ul><ol start="3"><li>Create a branch for the respective issue.</li></ol><ul><li><code>git checkout -b &lt;branch-name&gt; dev</code></li><li>&lt;branch-name&gt; should follow name of feat/newpage, bug/#11 or docs/typo etc.</li></ul><ol start="5"><li>When Creating a PR, make sure to reference the respective issue.</li></ol><h2 id="issues" tabindex="-1">Issues <a class="header-anchor" href="#issues" aria-label="Permalink to &quot;Issues&quot;">​</a></h2><ul><li>Search open/closed issues before opening a new one.</li><li>For bugs, include OS, Docker version, logs, and steps to reproduce.</li><li>For features, describe the problem and proposed solution.</li></ul><h2 id="making-changes" tabindex="-1">Making Changes <a class="header-anchor" href="#making-changes" aria-label="Permalink to &quot;Making Changes&quot;">​</a></h2><ul><li>Create a feature/fix branch from <code>main</code>.</li><li>Use clear, descriptive commit messages.</li><li>Format your code with <code>gofmt</code>, and check with <code>golangci-lint</code>.</li><li>Commit Message should follow format &lt;type&gt;:&lt;desc&gt;, where type is like feat, bug, enhancement, chore etc.</li></ul><h2 id="pull-requests" tabindex="-1">Pull Requests <a class="header-anchor" href="#pull-requests" aria-label="Permalink to &quot;Pull Requests&quot;">​</a></h2><ul><li>Make PR to dev branch only!!</li><li>Each PR should focus on one change.</li><li>Link relevant issues in the PR.</li><li>Respond to reviewer comments.</li></ul><h2 id="help-feedback" tabindex="-1">Help &amp; Feedback <a class="header-anchor" href="#help-feedback" aria-label="Permalink to &quot;Help &amp; Feedback&quot;">​</a></h2><p>Questions? Use GitHub Discussions or open an issue with the “question” label.</p><h2 id="thanks" tabindex="-1">Thanks! <a class="header-anchor" href="#thanks" aria-label="Permalink to &quot;Thanks!&quot;">​</a></h2><p>All contributors are credited in the <a href="https://github.com/NucleoFusion/cruise?tab=readme-ov-file#-description" target="_blank" rel="noreferrer">Credits</a> section. We appreciate your help!</p>',20)]))}const g=t(l,[["render",r]]);export{p as __pageData,g as default};
